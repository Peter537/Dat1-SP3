@startuml

' *****************
' CLASS
' *****************

class Main {
    + static void main(String[] args)
}

' Main klassen
class ChillMedia {
    - ArrayList<IGenre> genres
    - ArrayList<IMovie> movies
    - ArrayList<ISerie> series
    - ArrayList<IUser> users

    + ChillMedia()
    - void load()
    + void run()

    - void listMovies()
    - void listSeries()
    - void listBoth()

    - ArrayList<IMedia> getPage(int page)

    + ArrayList<IMovie> getMovies()
    + ArrayList<ISeries> getSeries()
    + ArrayList<IGenre> getGenres()
    + ArrayList<IUser> getUsers()
}

class LogIn {
    - IUser currentUser

    + LogIn(ChillMedia cm)

    - void signUp()
    - void signIn()
    - void createUser()
    + IUser getCurrentUser()
}

class Query {
    ' STATIC CLASS, EVT. KUNNE MAN LAVE EN INSTANS AF DENNE
    ' OG BRUGE DEN I CHILLMEDIA OG DERFRA BRUGE QUERY
    + static ArrayList<ISeries> searchSeriesGenre(ArrayList<ISeries> series, SeriesGenre genre)
    + static ArrayList<IMovie> searchMovieGenre(ArrayList<IMovie> movies, MovieGenre genre)
    + static ArrayList<IMovie> searchGenre(ArrayList<IMedia> movies, IGenre genre)
    + static ArrayList<ISeries> searchSeriesTitle(ArrayList<ISeries> series, String title)
    + static ArrayList<IMovie> searchMovieTitle(ArrayList<IMovie> movies, String title)
    + static ArrayList<IMedia> searchTitle(ArrayList<IMedia> medias, String title)
    + static ArrayList<ISeries> searchSeriesRating(ArrayList<ISeries> series, int minimumRating)
    + static ArrayList<IMovie> searchMovieRating(ArrayList<IMovie> movies, int minimumRating)
    + static ArrayList<IMedia> searchRating(ArrayList<IMedia> medias, int minimumRating)
}

class TextIO {
    - Scanner scanner

    + TextIO()

    + void print(String message)
    + void println(String message)
    + String getUserInput(String message)
    + String getUserInput(String message, String[] optionsList)
}

class FileIO implements IDataIO {
    + FileIO()

    + ArrayList<IUser> loadUsers()
    + ArrayList<IMovie> loadMovies()
    + ArrayList<ISeries> loadSeries()
}

class User implements IUser {
    - static int idCounter
    - int id
    - String name
    - String password
    - String email
    - int age
    - ArrayList<IMovie> myMovies
    - ArrayList<IMovie> watchedMovies

    + User(String name, String email, String password, int age)
    - void saveWatchedMovies()
    - void saveMyMovies()
}

class Movie extends AWatchable implements IMovie {
    - int year

    + Movie(String title, float rating, ArrayList<IGenre> genres, int year)

    + int getYear()
}

class Series extends AWatchable implements ISeries {
    - int startYear
    - int endYear
    - ArrayList<ISeason> seasons

    + Series(String title, int startYear, int endYear, float rating, ArrayList<IGenre> genres, ArrayList<ISeason> seasons)

    + int getStartYear()
    + int getEndYear()
    + ArrayList<ISeason> getSeasons()
}

class Season extends ASeason {
    + Season(int seasonNumber, int episodeCount)
}

class LanguageDanish implements ILanguage {
    + LanguageDanish()
}

class LanguageEnglish implements ILanguage {
    + LanguageEnglish()
}

' *****************
' ABSTRACT CLASS
' *****************

abstract class AWatchable implements IMedia {
    - String title
    - float rating
    - ArrayList<IGenre> genres

    + AWatchable(String title, float rating, ArrayList<IGenre> genres)

    + String getTitle()
    + float getRating()
    + ArrayList<IGenre> getGenres()
}


abstract class ASeason extends Series {
    - int seasonNumber
    - int episodeCount

    + ASeason(int seasonNumber, int episodeCount)
}

' *****************
' INTERFACES
' *****************

interface IMedia {
    + String getTitle()
    + float getRating()
    + ArrayList<IGenre> getGenres()
}

interface ISeries extends IMedia {
    + int getStartYear()
    + int getEndYear()
    + ArrayList<ISeason> getSeasons()
}

interface IMovie extends IMedia {
    + int getYear()
}

interface IUser implements ISaveable {
    + int getId()
    + String getName()
    + String getEmail()
    + String getPassword()
    + int getAge()
    + ArrayList<IMovie> getMyMovies()
    + ArrayList<IMovie> getWatchedMovies()
    + boolean addMyMovie(IMovie movie)
    + void addWatchedMovie(IMovie movie)
    + boolean removeMyMovie(IMovie movie)
}

interface IDataIO {
    + ArrayList<IUser> loadUsers()
    + ArrayList<IMovie> loadMovies()
    + ArrayList<ISeries> loadSeries()
}

interface ILanguage {
    ' WILL MAKE THIS AT A LATER POINT
}

interface ISaveable {
    + void save()
}

interface IGenre { }

' *****************
' ENUMS
' *****************

enum MovieGenre implements IGenre {
    CRIME,
    DRAMA,
    BIOGRAPHY,
    SPORT,
    HISTORY,
    ROMANCE,
    WAR,
    MYSTERY,
    ADVENTURE,
    FAMILY,
    FANTASY,
    THRILLER,
    HORROR,
    FILM_NOIR,
    ACTION,
    SCI_FI,
    COMEDY,
    MUSICAL,
    WESTERN,
    MUSIC
}

enum SeriesGenre implements IGenre {
    TALK_SHOW,
    DOCUMENTARY,
    CRIME,
    DRAMA,
    ACTION,
    ADVENTURE,
    COMEDY,
    FANTASY,
    ANIMATION,
    HORROR,
    SCI_FI,
    WAR,
    THRILLER,
    MYSTERY,
    BIOGRAPHY,
    HISTORY,
    FAMILY,
    WESTERN,
    ROMANCE,
    SPORT
}

' *****************
' RELATIONS
' *****************

Main *-- ChillMedia

ChillMedia *-- IMedia
ChillMedia *-- TextIO
ChillMedia *-- IDataIO
ChillMedia *-- ILanguage
ChillMedia *-- IUser
ChillMedia *-- LogIn

@enduml